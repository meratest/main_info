Git How To:
___________________________________________________________________
Наш общий проет: https://github.com/meratest/main_info.git
(login\mail\password meratest\mera.test@yandex.ru\Qwerty1_qw)
___________________________________________________________________

Запускаем Git Bash

cd /d/git_test
git clone https://github.com/meratest/main_info.git  b1 // создаём локальную копию нашего общего проекта
git visual	GUI
___________________________________________________________________
Команды:
git config --global alias.st status	алиас
git init	создание проета (пустого репозитория)
git clone [url] или git clone [url] [name]	клонирование проета
git status	проверка статуса файлов проекта
git add	добавление файла в проект\индексирование изменённых файлов
git add.	внести в индекс все изменения, включая новые файлы
git rm	удаление файла
git rm -f	удаление проиндексированного файла
git rm --cached	удалить файл из индекса
git rm log/\*.log	удаляет все файлы, которые имеют расширение .log в каталоге log/
git rm \*~	 удаляет все файлы, чьи имена заканчиваются на ~
git mv file_from file_to	переименовать файл
git commit -m 'initial project version'	закоммитить файл с комментом
git commit -a — совершит коммит, автоматически индексируя изменения в файлах проекта, удаление учтено, новые нет
git commit [file_name]	несет в индекс и создаст коммит на основе изменений единственного файла 
git commit --amend	 команда берёт индекс и использует его для коммита
git diff	покажет изменения, не внесенные в индекc
git diff --cached	что проиндексировали и что войдёт в следующий коммит
git diff HEAD	изменения в проекте по сравнению с последним коммитом
git diff HEAD^	предпоследним коммитом
git diff master..experimental	cравнение «головы» веток
git blame	вспомогательная команда, помогающая отслеживать изменения файлов
git annotate	вспомогательная команда, помогающая отслеживать изменения файлов
git reset HEAD <file>	отмена индексирования файла
git reset	сбросить весь индекс
git reset --soft HEAD^	переходим к работе над уже совершенным коммитом, cохраняя все состояние проекта и проиндексированные файлы  (HEAD^ предок последнего коммита)
git reset --hard HEAD~1 — больше никто и никогда не увидит этот коммит (удаляет изменения последних коммитов)
git revert [tag_name]	отменяем коммит, помеченный тегом
git revert [hash] — отменяем коммит, используя его хэш.
git remote	удалённые серверы
git remote -v	URL
git remote add [сокращение] [url]	 добавление удаленного репозитория
git fetch <name or link>	 добавляет инфо которая есть в репозитории <name or link> но нет в вашем 
git fetch origin	забрать изменения с основного проекта
git fetch [dir_path]	забрать изменения из определенного репозитария
git pull	автоматически извлекает и затем сливает данные из удалённой ветки в вашу текущую ветку
git push [удал. сервер] [ветка]	залить изменения в основной проект\индексирование
git push origin master
git push origin [local_name]:[comman_name]
git remote show [удал. сервер]	получить больше информации об одном из удалённых репозиториев
git remote rename [old_name] [new_name]	переименование ссылок в новых версиях Git'а
git remote rm [name]	удаление репозитория
git tag	Просмотр имеющихся меток 
git tag -l 'v1.4.2.*'	поиск меток по шаблону
git tag -a [name_tag] -m 'меточное сообщение'	добавление аннотированной метки
git show [name_tag]	посмотреть данные метки вместе с коммитом
git show	показать изменения, внесенные отдельным коммитом 
git grep [word]	поиск слова по проекту, состоянию проекта в прошлом 
git grep -c [word]	подсчитать число упоминаний [word] в проекте.
git grep -e '[word1]' --and -e '[word2]'	найти строки, где упоминаются [word1] и [word2]
git grep --all-match -e '[word1]' -e '[word2]'	найти строки, где встречается хотя бы одно из слов
git tag -s [name_tag] -m 'меточное сообщение'	создание подписанной метки, нужен ключ
git tag [name_tag]	создание легковесной метки
git tag [name_tag] [hash]	создани тега для конкретного коммита
git tag -v [name_tag]	проверка подписанной метки
git tag -a [name_tag] -m 'меточное сообщение' [контрольная сумма или её часть]
git tag -d [name_tag]	удалить тег
git tag -l	перечислить тэги
git tag -f [name_tag]	создать тэг для последнего коммита, заменить существующий, если таковой уже был
git push origin [name_tag]	отправление меток
git push origin --tags	отправление всех меток
git push [удал. сервер] :[ветка]	удаление ветки с общего сервера
git push --force	переписать историю на сервере
git push [project] [name_1]:[name_2]	отправить изменения из ветки [name_1] в ветку [name_2] удаленного репозитария [project]
git branch [name]	создание новой ветки
git branch -d [name]	удаление смёрженой ветки
git branch -D [name]	удаление ветки в любом случае
git branch -m [new_name] переименование ветки
git branch	просмотреть список веток
git branch -v	просмотреть последний коммит на каждой из веток
git branch --merged	список смёрженых веток (в текущую)
git branch --no-merged	список не смёрженых веток (в текущую)
git branch --contains [name]	покажет те ветки, среди предков которых есть определенный коммит
git checkout -- <file>	отменить все изменения
git checkout [name]	переход на существующую ветку
git checkout -b [name]	создаём новую ветку и сразу на неё переходим, если все файлы закоммичены
git checkout -f [name]	создаём новую ветку и сразу на неё переходим, в любом случае
git checkout -m [name]	создаём новую ветку и сразу на неё переходим, коммитятся все текущие изменения
git checkout -b [local_name] origin/[common_name]	создаём ветку с ветки на основном проекте
git checkout [file_name]	вернуть файл к состоянию последнего коммита
git checkout HEAD~2 [file_name] — вернуть файл к состоянию на два коммита назад по ветке
git merge [name]	 сливает изменения ветки в которой находишься с веткой [name]
git mergetool --tool=[tool]	запуск графического инструмента 
git rebase	построение ровной линии коммитов
git rebase [branch_name]	на [branch_name] накладывается активная в настоящий момент ветка
git rebase --onto [branch_name_1] [branch_name_2] [branch_name_3]	Перемещение изменений с branch_name_3 на branch_name_1
git rebase [branch_name_1] [branch_name_2]	Перемещение изменений с branch_name_2 на branch_name_1
git rebase --continue	продолжить перемещение, после устранения конфликта
git rebase --skip	пропустить наложение коммита и перейти к следующему
git rebase --abort	отмена работы команды и всех внесенных изменений
git cherry-pick BUG_FIX_TAG	изменения, внесенные указанным коммитом будут применены к дереву, автоматически проиндексированы и станут коммитом в активной ветке
git cherry-pick BUG_FIX_TAG -n	ключ "-n" показывает, что изменения надо просто применить к дереву проекта без индексации и создания коммита

git help gitignore	про игнорирование файлов

git log	история коммитов
___________________________________________________________________
Параметр 	Описание
-p 	Для каждого коммита показывать дельту внесённых им изменений.
--word-diff 	Показывать изменения на уровне слов.
--stat 	Для каждого коммита дополнительно выводить статистику по изменённым файлам.
--shortstat 	Показывать только строку changed/insertions/deletions от вывода с опцией --stat.
--name-only 	Показывать список изменённых файлов после информации о коммите.
--name-status 	Выводить список изменённых файлов вместе с информацией о добавлении/изменении/удалении.
--abbrev-commit 	Выводить только первые несколько символов контрольной суммы SHA-1 вместо всех 40.
--relative-date 	Выводить дату в относительном формате (например, "2 weeks ago") вместо полной даты.
--graph 	Показывать ASCII-граф истории ветвлений и слияний рядом с выводом лога.
--pretty 	Отображать коммиты в альтернативном формате. Возможные параметры: oneline, short, full, fuller и format (где вы можете указать свой собственный формат).
___________________________________________________________________
git log -p -2	 история с разницей, огранино 2 последними.
git log -p --word-diff
git log -U1 --word-diff
git log --stat	 статистика по коммиту
git log --pretty=oneline	 в одну строку
git log --since=2.weeks	ограничение по времени
git log --pretty=format:"%h - %an, %ar : %s"
___________________________________________________________________
Параметр 	Описание выводимых данных
%H 	Хеш коммита
%h 	Сокращённый хеш коммита
%T 	Хеш дерева
%t 	Сокращённый хеш дерева
%P 	Хеши родительских коммитов
%p 	Сокращённые хеши родительских коммитов
%an 	Имя автора
%ae 	Электронная почта автора
%ad 	Дата автора (формат соответствует параметру --date=)
%ar 	Дата автора, относительная (пр. "2 мес. назад")
%cn 	Имя коммитера
%ce 	Электронная почта коммитера
%cd 	Дата коммитера
%cr 	Дата коммитера, относительная
%s 	Комментарий
___________________________________________________________________
Опция ограничения 	Описание
-(n) 	Показать последние n коммитов
--since, --after 	Ограничить коммиты теми, которые сделаны после указанной даты.
--until, --before 	Ограничить коммиты теми, которые сделаны до указанной даты.
--author 	Показать только те коммиты, автор которых соответствует указанной строке.
--committer 	Показать только те коммиты, коммитер которых соответствует указанной строке.
___________________________________________________________________
git log --pretty=format:"%h %s" --graph	отображается граф-ветвление

Файл .gitignore в котором шаблоны типа *.[oa], *~ чтобы файлы не отображались

git:// (у нас не работает) или http(s):// или user@server:/path.git
___________________________________________________________________
Restrictions:
Названия файлов без пробелов